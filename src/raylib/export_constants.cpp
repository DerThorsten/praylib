#include <iostream>

#include <nanobind/nanobind.h>


// ray math
extern "C" {
#include <raylib.h>
}

// nanobind namespace
namespace nb = nanobind;
 


void export_constants(nb::module_& m)
{
    nb::enum_<ConfigFlags>(m, "ConfigFlags")
        .value("FLAG_VSYNC_HINT", FLAG_VSYNC_HINT)
        .value("FLAG_FULLSCREEN_MODE", FLAG_FULLSCREEN_MODE)
        .value("FLAG_WINDOW_RESIZABLE", FLAG_WINDOW_RESIZABLE)
        .value("FLAG_WINDOW_UNDECORATED", FLAG_WINDOW_UNDECORATED)
        .value("FLAG_WINDOW_HIDDEN", FLAG_WINDOW_HIDDEN)
        .value("FLAG_WINDOW_MINIMIZED", FLAG_WINDOW_MINIMIZED)
        .value("FLAG_WINDOW_MAXIMIZED", FLAG_WINDOW_MAXIMIZED)
        .value("FLAG_WINDOW_UNFOCUSED", FLAG_WINDOW_UNFOCUSED)
        .value("FLAG_WINDOW_TOPMOST", FLAG_WINDOW_TOPMOST)
        .value("FLAG_WINDOW_ALWAYS_RUN", FLAG_WINDOW_ALWAYS_RUN)
        .value("FLAG_WINDOW_TRANSPARENT", FLAG_WINDOW_TRANSPARENT)
        .value("FLAG_WINDOW_HIGHDPI", FLAG_WINDOW_HIGHDPI)
        .value("FLAG_WINDOW_MOUSE_PASSTHROUGH", FLAG_WINDOW_MOUSE_PASSTHROUGH)
        .value("FLAG_BORDERLESS_WINDOWED_MODE", FLAG_BORDERLESS_WINDOWED_MODE)
        .value("FLAG_MSAA_4X_HINT", FLAG_MSAA_4X_HINT)
        .value("FLAG_INTERLACED_HINT", FLAG_INTERLACED_HINT)
    ;

    nb::enum_<TraceLogLevel>(m, "TraceLogLevel")
        .value("LOG_ALL", LOG_ALL)
        .value("LOG_TRACE", LOG_TRACE)
        .value("LOG_DEBUG", LOG_DEBUG)
        .value("LOG_INFO", LOG_INFO)
        .value("LOG_WARNING", LOG_WARNING)
        .value("LOG_ERROR", LOG_ERROR)
        .value("LOG_FATAL", LOG_FATAL)
        .value("LOG_NONE", LOG_NONE)
    ;

    nb::enum_<KeyboardKey>(m, "KeyboardKey")
        .value("KEY_NULL", KEY_NULL)
        .value("KEY_APOSTROPHE", KEY_APOSTROPHE)
        .value("KEY_COMMA", KEY_COMMA)
        .value("KEY_MINUS", KEY_MINUS)
        .value("KEY_PERIOD", KEY_PERIOD)
        .value("KEY_SLASH", KEY_SLASH)
        .value("KEY_ZERO", KEY_ZERO)
        .value("KEY_ONE", KEY_ONE)
        .value("KEY_TWO", KEY_TWO)
        .value("KEY_THREE", KEY_THREE)
        .value("KEY_FOUR", KEY_FOUR)
        .value("KEY_FIVE", KEY_FIVE)
        .value("KEY_SIX", KEY_SIX)
        .value("KEY_SEVEN", KEY_SEVEN)
        .value("KEY_EIGHT", KEY_EIGHT)
        .value("KEY_NINE", KEY_NINE)
        .value("KEY_SEMICOLON", KEY_SEMICOLON)
        .value("KEY_EQUAL", KEY_EQUAL)
        .value("KEY_A", KEY_A)
        .value("KEY_B", KEY_B)
        .value("KEY_C", KEY_C)
        .value("KEY_D", KEY_D)
        .value("KEY_E", KEY_E)
        .value("KEY_F", KEY_F)
        .value("KEY_G", KEY_G)
        .value("KEY_H", KEY_H)
        .value("KEY_I", KEY_I)
        .value("KEY_J", KEY_J)
        .value("KEY_K", KEY_K)
        .value("KEY_L", KEY_L)
        .value("KEY_M", KEY_M)
        .value("KEY_N", KEY_N)
        .value("KEY_O", KEY_O)
        .value("KEY_P", KEY_P)
        .value("KEY_Q", KEY_Q)
        .value("KEY_R", KEY_R)
        .value("KEY_S", KEY_S)
        .value("KEY_T", KEY_T)
        .value("KEY_U", KEY_U)
        .value("KEY_V", KEY_V)
        .value("KEY_W", KEY_W)
        .value("KEY_X", KEY_X)
        .value("KEY_Y", KEY_Y)
        .value("KEY_Z", KEY_Z)
        .value("KEY_SPACE", KEY_SPACE)
        .value("KEY_ENTER", KEY_ENTER)
        .value("KEY_TAB", KEY_TAB)
        .value("KEY_BACKSPACE", KEY_BACKSPACE)
        .value("KEY_INSERT", KEY_INSERT)
        .value("KEY_DELETE", KEY_DELETE)
        .value("KEY_RIGHT", KEY_RIGHT)
        .value("KEY_LEFT", KEY_LEFT)
        .value("KEY_DOWN", KEY_DOWN)
        .value("KEY_UP", KEY_UP)
        .value("KEY_PAGE_UP", KEY_PAGE_UP)
        .value("KEY_PAGE_DOWN", KEY_PAGE_DOWN)
        .value("KEY_HOME", KEY_HOME)
        .value("KEY_END", KEY_END)
        .value("KEY_CAPS_LOCK", KEY_CAPS_LOCK)
        .value("KEY_SCROLL_LOCK", KEY_SCROLL_LOCK)
        .value("KEY_NUM_LOCK", KEY_NUM_LOCK)
        .value("KEY_PRINT_SCREEN", KEY_PRINT_SCREEN)
        .value("KEY_PAUSE", KEY_PAUSE)
        .value("KEY_F1", KEY_F1)
        .value("KEY_F2", KEY_F2)
        .value("KEY_F3", KEY_F3)
        .value("KEY_F4", KEY_F4)
        .value("KEY_F5", KEY_F5)
        .value("KEY_F6", KEY_F6)
        .value("KEY_F7", KEY_F7)
        .value("KEY_F8", KEY_F8)
        .value("KEY_F9", KEY_F9)
        .value("KEY_F10", KEY_F10)
        .value("KEY_F11", KEY_F11)
        .value("KEY_F12", KEY_F12)
        .value("KEY_LEFT_SHIFT", KEY_LEFT_SHIFT)
        .value("KEY_LEFT_CONTROL", KEY_LEFT_CONTROL)
        .value("KEY_LEFT_ALT", KEY_LEFT_ALT)
        .value("KEY_LEFT_SUPER", KEY_LEFT_SUPER)
        .value("KEY_RIGHT_SHIFT", KEY_RIGHT_SHIFT)
        .value("KEY_RIGHT_CONTROL", KEY_RIGHT_CONTROL)
        .value("KEY_RIGHT_ALT", KEY_RIGHT_ALT)
        .value("KEY_RIGHT_SUPER", KEY_RIGHT_SUPER)
        .value("KEY_KB_MENU", KEY_KB_MENU)
        .value("KEY_KP_0", KEY_KP_0)
        .value("KEY_KP_1", KEY_KP_1)
        .value("KEY_KP_2", KEY_KP_2)
        .value("KEY_KP_3", KEY_KP_3)
        .value("KEY_KP_4", KEY_KP_4)
        .value("KEY_KP_5", KEY_KP_5)
        .value("KEY_KP_6", KEY_KP_6)
        .value("KEY_KP_7", KEY_KP_7)
        .value("KEY_KP_8", KEY_KP_8)
        .value("KEY_KP_9", KEY_KP_9)
        .value("KEY_KP_DECIMAL", KEY_KP_DECIMAL)
        .value("KEY_KP_DIVIDE", KEY_KP_DIVIDE)
        .value("KEY_KP_MULTIPLY", KEY_KP_MULTIPLY)
        .value("KEY_KP_SUBTRACT", KEY_KP_SUBTRACT)
        .value("KEY_KP_ADD", KEY_KP_ADD)
        .value("KEY_KP_ENTER", KEY_KP_ENTER)
        .value("KEY_KP_EQUAL", KEY_KP_EQUAL)
        .value("KEY_BACK", KEY_BACK)
        .value("KEY_MENU", KEY_MENU)
        .value("KEY_VOLUME_UP", KEY_VOLUME_UP)
        .value("KEY_VOLUME_DOWN", KEY_VOLUME_DOWN)
    ;

    nb::enum_<MouseButton>(m, "MouseButton")
        .value("MOUSE_BUTTON_LEFT", MOUSE_BUTTON_LEFT)
        .value("MOUSE_BUTTON_RIGHT", MOUSE_BUTTON_RIGHT)
        .value("MOUSE_BUTTON_MIDDLE", MOUSE_BUTTON_MIDDLE)
        .value("MOUSE_BUTTON_SIDE", MOUSE_BUTTON_SIDE)
        .value("MOUSE_BUTTON_EXTRA", MOUSE_BUTTON_EXTRA)
        .value("MOUSE_BUTTON_FORWARD", MOUSE_BUTTON_FORWARD)
        .value("MOUSE_BUTTON_BACK", MOUSE_BUTTON_BACK)
    ;

    nb::enum_<MouseCursor>(m, "MouseCursor")
        .value("MOUSE_CURSOR_DEFAULT", MOUSE_CURSOR_DEFAULT)
        .value("MOUSE_CURSOR_ARROW", MOUSE_CURSOR_ARROW)
        .value("MOUSE_CURSOR_IBEAM", MOUSE_CURSOR_IBEAM)
        .value("MOUSE_CURSOR_CROSSHAIR", MOUSE_CURSOR_CROSSHAIR)
        .value("MOUSE_CURSOR_POINTING_HAND", MOUSE_CURSOR_POINTING_HAND)
        .value("MOUSE_CURSOR_RESIZE_EW", MOUSE_CURSOR_RESIZE_EW)
        .value("MOUSE_CURSOR_RESIZE_NS", MOUSE_CURSOR_RESIZE_NS)
        .value("MOUSE_CURSOR_RESIZE_NWSE", MOUSE_CURSOR_RESIZE_NWSE)
        .value("MOUSE_CURSOR_RESIZE_NESW", MOUSE_CURSOR_RESIZE_NESW)
        .value("MOUSE_CURSOR_RESIZE_ALL", MOUSE_CURSOR_RESIZE_ALL)
        .value("MOUSE_CURSOR_NOT_ALLOWED", MOUSE_CURSOR_NOT_ALLOWED)
    ; 

    nb::enum_<GamepadButton>(m, "GamepadButton")
        .value("GAMEPAD_BUTTON_UNKNOWN", GAMEPAD_BUTTON_UNKNOWN)
        .value("GAMEPAD_BUTTON_LEFT_FACE_UP", GAMEPAD_BUTTON_LEFT_FACE_UP)
        .value("GAMEPAD_BUTTON_LEFT_FACE_RIGHT", GAMEPAD_BUTTON_LEFT_FACE_RIGHT)
        .value("GAMEPAD_BUTTON_LEFT_FACE_DOWN", GAMEPAD_BUTTON_LEFT_FACE_DOWN)
        .value("GAMEPAD_BUTTON_LEFT_FACE_LEFT", GAMEPAD_BUTTON_LEFT_FACE_LEFT)
        .value("GAMEPAD_BUTTON_RIGHT_FACE_UP", GAMEPAD_BUTTON_RIGHT_FACE_UP)
        .value("GAMEPAD_BUTTON_RIGHT_FACE_RIGHT", GAMEPAD_BUTTON_RIGHT_FACE_RIGHT)
        .value("GAMEPAD_BUTTON_RIGHT_FACE_DOWN", GAMEPAD_BUTTON_RIGHT_FACE_DOWN)
        .value("GAMEPAD_BUTTON_RIGHT_FACE_LEFT", GAMEPAD_BUTTON_RIGHT_FACE_LEFT)
        .value("GAMEPAD_BUTTON_LEFT_TRIGGER_1", GAMEPAD_BUTTON_LEFT_TRIGGER_1)
        .value("GAMEPAD_BUTTON_LEFT_TRIGGER_2", GAMEPAD_BUTTON_LEFT_TRIGGER_2)
        .value("GAMEPAD_BUTTON_RIGHT_TRIGGER_1", GAMEPAD_BUTTON_RIGHT_TRIGGER_1)
        .value("GAMEPAD_BUTTON_RIGHT_TRIGGER_2", GAMEPAD_BUTTON_RIGHT_TRIGGER_2)
        .value("GAMEPAD_BUTTON_MIDDLE_LEFT", GAMEPAD_BUTTON_MIDDLE_LEFT)
        .value("GAMEPAD_BUTTON_MIDDLE", GAMEPAD_BUTTON_MIDDLE)
        .value("GAMEPAD_BUTTON_MIDDLE_RIGHT", GAMEPAD_BUTTON_MIDDLE_RIGHT)
        .value("GAMEPAD_BUTTON_LEFT_THUMB", GAMEPAD_BUTTON_LEFT_THUMB)
        .value("GAMEPAD_BUTTON_RIGHT_THUMB", GAMEPAD_BUTTON_RIGHT_THUMB)
    ;


    nb::enum_<GamepadAxis>(m, "GamepadAxis")
        .value("GAMEPAD_AXIS_LEFT_X", GAMEPAD_AXIS_LEFT_X)
        .value("GAMEPAD_AXIS_LEFT_Y", GAMEPAD_AXIS_LEFT_Y)
        .value("GAMEPAD_AXIS_RIGHT_X", GAMEPAD_AXIS_RIGHT_X)
        .value("GAMEPAD_AXIS_RIGHT_Y", GAMEPAD_AXIS_RIGHT_Y)
        .value("GAMEPAD_AXIS_LEFT_TRIGGER", GAMEPAD_AXIS_LEFT_TRIGGER)
        .value("GAMEPAD_AXIS_RIGHT_TRIGGER", GAMEPAD_AXIS_RIGHT_TRIGGER)
    ;



    nb::enum_<MaterialMapIndex>(m, "MaterialMapIndex")
        .value("MATERIAL_MAP_ALBEDO", MATERIAL_MAP_ALBEDO)
        .value("MATERIAL_MAP_METALNESS", MATERIAL_MAP_METALNESS)
        .value("MATERIAL_MAP_NORMAL", MATERIAL_MAP_NORMAL)
        .value("MATERIAL_MAP_ROUGHNESS", MATERIAL_MAP_ROUGHNESS)
        .value("MATERIAL_MAP_OCCLUSION", MATERIAL_MAP_OCCLUSION)
        .value("MATERIAL_MAP_EMISSION", MATERIAL_MAP_EMISSION)
        .value("MATERIAL_MAP_HEIGHT", MATERIAL_MAP_HEIGHT)
        .value("MATERIAL_MAP_CUBEMAP", MATERIAL_MAP_CUBEMAP)
        .value("MATERIAL_MAP_IRRADIANCE", MATERIAL_MAP_IRRADIANCE)
        .value("MATERIAL_MAP_PREFILTER", MATERIAL_MAP_PREFILTER)
        .value("MATERIAL_MAP_BRDF", MATERIAL_MAP_BRDF)
    ;

    nb::enum_<ShaderLocationIndex>(m, "ShaderLocationIndex")
        .value("SHADER_LOC_VERTEX_POSITION", SHADER_LOC_VERTEX_POSITION)
        .value("SHADER_LOC_VERTEX_TEXCOORD01", SHADER_LOC_VERTEX_TEXCOORD01)
        .value("SHADER_LOC_VERTEX_TEXCOORD02", SHADER_LOC_VERTEX_TEXCOORD02)
        .value("SHADER_LOC_VERTEX_NORMAL", SHADER_LOC_VERTEX_NORMAL)
        .value("SHADER_LOC_VERTEX_TANGENT", SHADER_LOC_VERTEX_TANGENT)
        .value("SHADER_LOC_VERTEX_COLOR", SHADER_LOC_VERTEX_COLOR)
        .value("SHADER_LOC_MATRIX_MVP", SHADER_LOC_MATRIX_MVP)
        .value("SHADER_LOC_MATRIX_VIEW", SHADER_LOC_MATRIX_VIEW)
        .value("SHADER_LOC_MATRIX_PROJECTION", SHADER_LOC_MATRIX_PROJECTION)
        .value("SHADER_LOC_MATRIX_MODEL", SHADER_LOC_MATRIX_MODEL)
        .value("SHADER_LOC_MATRIX_NORMAL", SHADER_LOC_MATRIX_NORMAL)
        .value("SHADER_LOC_VECTOR_VIEW", SHADER_LOC_VECTOR_VIEW)
        .value("SHADER_LOC_COLOR_DIFFUSE", SHADER_LOC_COLOR_DIFFUSE)
        .value("SHADER_LOC_COLOR_SPECULAR", SHADER_LOC_COLOR_SPECULAR)
        .value("SHADER_LOC_COLOR_AMBIENT", SHADER_LOC_COLOR_AMBIENT)
        .value("SHADER_LOC_MAP_ALBEDO", SHADER_LOC_MAP_ALBEDO)
        .value("SHADER_LOC_MAP_METALNESS", SHADER_LOC_MAP_METALNESS)
        .value("SHADER_LOC_MAP_NORMAL", SHADER_LOC_MAP_NORMAL)
        .value("SHADER_LOC_MAP_ROUGHNESS", SHADER_LOC_MAP_ROUGHNESS)
        .value("SHADER_LOC_MAP_OCCLUSION", SHADER_LOC_MAP_OCCLUSION)
        .value("SHADER_LOC_MAP_EMISSION", SHADER_LOC_MAP_EMISSION)
        .value("SHADER_LOC_MAP_HEIGHT", SHADER_LOC_MAP_HEIGHT)
        .value("SHADER_LOC_MAP_CUBEMAP", SHADER_LOC_MAP_CUBEMAP)
        .value("SHADER_LOC_MAP_IRRADIANCE", SHADER_LOC_MAP_IRRADIANCE)
        .value("SHADER_LOC_MAP_PREFILTER", SHADER_LOC_MAP_PREFILTER)
        .value("SHADER_LOC_MAP_BRDF", SHADER_LOC_MAP_BRDF)
        .value("SHADER_LOC_VERTEX_BONEIDS", SHADER_LOC_VERTEX_BONEIDS)
        .value("SHADER_LOC_VERTEX_BONEWEIGHTS", SHADER_LOC_VERTEX_BONEWEIGHTS)
        .value("SHADER_LOC_BONE_MATRICES", SHADER_LOC_BONE_MATRICES)
        //.value("SHADER_LOC_VERTEX_INSTANCE_TX", SHADER_LOC_VERTEX_INSTANCE_TX)
    ;

    nb::enum_<ShaderUniformDataType>(m, "ShaderUniformDataType")
        .value("SHADER_UNIFORM_FLOAT", SHADER_UNIFORM_FLOAT)
        .value("SHADER_UNIFORM_VEC2", SHADER_UNIFORM_VEC2)
        .value("SHADER_UNIFORM_VEC3", SHADER_UNIFORM_VEC3)
        .value("SHADER_UNIFORM_VEC4", SHADER_UNIFORM_VEC4)
        .value("SHADER_UNIFORM_INT", SHADER_UNIFORM_INT)
        .value("SHADER_UNIFORM_IVEC2", SHADER_UNIFORM_IVEC2)
        .value("SHADER_UNIFORM_IVEC3", SHADER_UNIFORM_IVEC3)
        .value("SHADER_UNIFORM_IVEC4", SHADER_UNIFORM_IVEC4)
       // .value("SHADER_UNIFORM_UINT", SHADER_UNIFORM_UINT)
       // .value("SHADER_UNIFORM_UIVEC2", SHADER_UNIFORM_UIVEC2)
        // .value("SHADER_UNIFORM_UIVEC3", SHADER_UNIFORM_UIVEC3)
        // .value("SHADER_UNIFORM_UIVEC4", SHADER_UNIFORM_UIVEC4)
        .value("SHADER_UNIFORM_SAMPLER2D", SHADER_UNIFORM_SAMPLER2D)
    ;


    nb::enum_<ShaderAttributeDataType>(m, "ShaderAttributeDataType")
        .value("SHADER_ATTRIB_FLOAT", SHADER_ATTRIB_FLOAT)
        .value("SHADER_ATTRIB_VEC2", SHADER_ATTRIB_VEC2)
        .value("SHADER_ATTRIB_VEC3", SHADER_ATTRIB_VEC3)
        .value("SHADER_ATTRIB_VEC4", SHADER_ATTRIB_VEC4)
    ;

    nb::enum_<PixelFormat>(m, "PixelFormat")
        .value("PIXELFORMAT_UNCOMPRESSED_GRAYSCALE", PIXELFORMAT_UNCOMPRESSED_GRAYSCALE)
        .value("PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA", PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA)
        .value("PIXELFORMAT_UNCOMPRESSED_R5G6B5", PIXELFORMAT_UNCOMPRESSED_R5G6B5)
        .value("PIXELFORMAT_UNCOMPRESSED_R8G8B8", PIXELFORMAT_UNCOMPRESSED_R8G8B8)
        .value("PIXELFORMAT_UNCOMPRESSED_R5G5B5A1", PIXELFORMAT_UNCOMPRESSED_R5G5B5A1)
        .value("PIXELFORMAT_UNCOMPRESSED_R4G4B4A4", PIXELFORMAT_UNCOMPRESSED_R4G4B4A4)
        .value("PIXELFORMAT_UNCOMPRESSED_R8G8B8A8", PIXELFORMAT_UNCOMPRESSED_R8G8B8A8)
        .value("PIXELFORMAT_UNCOMPRESSED_R32", PIXELFORMAT_UNCOMPRESSED_R32)
        .value("PIXELFORMAT_UNCOMPRESSED_R32G32B32", PIXELFORMAT_UNCOMPRESSED_R32G32B32)
        .value("PIXELFORMAT_UNCOMPRESSED_R32G32B32A32", PIXELFORMAT_UNCOMPRESSED_R32G32B32A32)
        .value("PIXELFORMAT_UNCOMPRESSED_R16", PIXELFORMAT_UNCOMPRESSED_R16)
        .value("PIXELFORMAT_UNCOMPRESSED_R16G16B16", PIXELFORMAT_UNCOMPRESSED_R16G16B16)
        .value("PIXELFORMAT_UNCOMPRESSED_R16G16B16A16", PIXELFORMAT_UNCOMPRESSED_R16G16B16A16)
        .value("PIXELFORMAT_COMPRESSED_DXT1_RGB", PIXELFORMAT_COMPRESSED_DXT1_RGB)
        .value("PIXELFORMAT_COMPRESSED_DXT1_RGBA", PIXELFORMAT_COMPRESSED_DXT1_RGBA)
        .value("PIXELFORMAT_COMPRESSED_DXT3_RGBA", PIXELFORMAT_COMPRESSED_DXT3_RGBA)
        .value("PIXELFORMAT_COMPRESSED_DXT5_RGBA", PIXELFORMAT_COMPRESSED_DXT5_RGBA)
        .value("PIXELFORMAT_COMPRESSED_ETC1_RGB", PIXELFORMAT_COMPRESSED_ETC1_RGB)
        .value("PIXELFORMAT_COMPRESSED_ETC2_RGB", PIXELFORMAT_COMPRESSED_ETC2_RGB)
        .value("PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA", PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA)
        .value("PIXELFORMAT_COMPRESSED_PVRT_RGB", PIXELFORMAT_COMPRESSED_PVRT_RGB)
        .value("PIXELFORMAT_COMPRESSED_PVRT_RGBA", PIXELFORMAT_COMPRESSED_PVRT_RGBA)
        .value("PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA", PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA)
        .value("PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA", PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA)
    ;


    nb::enum_<TextureFilter>(m, "TextureFilter")
        .value("TEXTURE_FILTER_POINT", TEXTURE_FILTER_POINT)
        .value("TEXTURE_FILTER_BILINEAR", TEXTURE_FILTER_BILINEAR)
        .value("TEXTURE_FILTER_TRILINEAR", TEXTURE_FILTER_TRILINEAR)
        .value("TEXTURE_FILTER_ANISOTROPIC_4X", TEXTURE_FILTER_ANISOTROPIC_4X)
        .value("TEXTURE_FILTER_ANISOTROPIC_8X", TEXTURE_FILTER_ANISOTROPIC_8X)
        .value("TEXTURE_FILTER_ANISOTROPIC_16X", TEXTURE_FILTER_ANISOTROPIC_16X)
    ;

    nb::enum_<TextureWrap>(m, "TextureWrap")
        .value("TEXTURE_WRAP_REPEAT", TEXTURE_WRAP_REPEAT)
        .value("TEXTURE_WRAP_CLAMP", TEXTURE_WRAP_CLAMP)
        .value("TEXTURE_WRAP_MIRROR_REPEAT", TEXTURE_WRAP_MIRROR_REPEAT)
        .value("TEXTURE_WRAP_MIRROR_CLAMP", TEXTURE_WRAP_MIRROR_CLAMP)
    ;



    nb::enum_<CubemapLayout>(m, "CubemapLayout")
        .value("CUBEMAP_LAYOUT_AUTO_DETECT", CUBEMAP_LAYOUT_AUTO_DETECT)
        .value("CUBEMAP_LAYOUT_LINE_VERTICAL", CUBEMAP_LAYOUT_LINE_VERTICAL)
        .value("CUBEMAP_LAYOUT_LINE_HORIZONTAL", CUBEMAP_LAYOUT_LINE_HORIZONTAL)
        .value("CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR", CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR)
        .value("CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE", CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE)
    ;



    nb::enum_<FontType>(m, "FontType")
        .value("FONT_DEFAULT", FONT_DEFAULT)
        .value("FONT_BITMAP", FONT_BITMAP)
        .value("FONT_SDF", FONT_SDF)
    ;



    nb::enum_<BlendMode>(m, "BlendMode")
        .value("BLEND_ALPHA", BLEND_ALPHA)
        .value("BLEND_ADDITIVE", BLEND_ADDITIVE)
        .value("BLEND_MULTIPLIED", BLEND_MULTIPLIED)
        .value("BLEND_ADD_COLORS", BLEND_ADD_COLORS)
        .value("BLEND_SUBTRACT_COLORS", BLEND_SUBTRACT_COLORS)
        .value("BLEND_ALPHA_PREMULTIPLY", BLEND_ALPHA_PREMULTIPLY)
        .value("BLEND_CUSTOM", BLEND_CUSTOM)
        .value("BLEND_CUSTOM_SEPARATE", BLEND_CUSTOM_SEPARATE)
    ;

}

